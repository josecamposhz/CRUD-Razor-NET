@page "/counter"
@using Npgsql
@using System.Collections.Generic;
@using Data
@using System.Globalization

<h1>Tasks</h1>
@if (!addingRecord) {
    <div style="display: flex; justify-content: space-between">
        <div>
            <input type="radio" name="radioBtn" checked="@(currentRadio.Equals("all"))" value="all"
                @onchange="onChangeRadio" /> All records
            <input type="radio" name="radioBtn" checked="@(currentRadio.Equals("byStatus"))" value="byStatus"
                @onchange="onChangeRadio" /> Filter by status
            <div class="mt-2" style="display: @(currentRadio.Equals("byStatus") ? "" : "none");">
                <h5>Select a status </h5>
                <select value="@currentStatus" @onchange="onChangeStatus" class="form-control">
                    @foreach (var sts in statusList)
                    {
                        <option value="@sts">@(sts)</option>
                    }
                </select>
            </div>
        </div>
        <div>
            <button class="btn btn-primary" @onclick="() => addingRecord = true">New</button>
        </div>
    </div>
    <hr>
    @if (myTasks.Count > 0 && !addingRecord)
    {
        int tot = 0;
        <table class="table table-dark" border="1">
            <tr>
                <td>Actions</td>
                <td>ID</td>
                <td>Task</td>
                <td>On charge</td>
                <td>Deadline</td>
                <td>Status</td>
            </tr>
            @foreach (var task in myTasks)
            {
                tot++;
                <tr style="font-size: 9;">
                    <td>
                        <button type="button" class="btn btn-danger" @onclick="() => deleteTask(task)">X</button>
                    </td>
                    <td>@(task.task_id)</td>
                    <td>@(task.taskname)</td>
                    <td>@(task.responsible)</td>
                    <td>@(task.deadline)</td>
                    <td>
                        <select class="form-control" value="@task.status" @onchange="(e) => updateTaskStatus(e, task)">
                            @foreach (var sts in statusList)
                            {
                                <option value="@sts">@(sts)</option>
                            }
                        </select>
                    </td>
                </tr>
            }
        </table>
        <p>Total of Running Tasks: @tot</p>
    }
    else
    {
        <h3>No Running Tasks</h3>
    }
} else {
    <table class="table table-dark" border="1">
        <tr class="form-group">
            <td>Taskname</td>
            <td>Supervisor</td>
            <td>Email supervisor</td>
            <td>Responsible</td>
            <td>Email responsible</td>
            <td>Deadline</td>
            <td>Estimate hours</td>
            <td>Status</td>
        </tr>
        <tr style="font-size: 9;">
            <td><input class="form-control" @bind="newTask.taskname" /></td>
            <td><input class="form-control" @bind="newTask.supervisor" /></td>
            <td><input class="form-control" @bind="newTask.email_supervisor" /></td>
            <td><input class="form-control" @bind="newTask.responsible" /></td>
            <td><input class="form-control" @bind="newTask.email_responsible" /></td>
            <td><input class="form-control" type="datetime-local" @bind="newTask.deadline" /></td>
            <td><input class="form-control" type="number" @bind="newTask.estimate_hours"/></td>
            <td>
                <select class="form-control" @bind="@newTask.status">
                    @foreach (var sts in statusList)
                    {
                        <option value="@sts">@(sts)</option>
                    }
                </select>
            </td>
        </tr>
    </table>
    <div class="d-flex justify-content-end">
        <button type="button" class="btn btn-primary" @onclick="() => addingRecord = false">Cancel</button>
        <button type="button" class="btn btn-success ml-2" @onclick="addTask">Add</button>
    </div>
}

@code {
    private MyPostgresDB DB = new MyPostgresDB();
    private List<DBTask> myTasks = new List<DBTask>();
    private List<String> statusList = new List<String> { "Running", "Delivering", "Revising", "Accepted", "Cancelled" };
    private String currentStatus = "Running";
    private String currentRadio = "byStatus";
    private Boolean addingRecord = false;
    private DBTask newTask = new DBTask();
    protected override void OnInitialized()
    {
        GetRunningTasks();
    }
    private void GetRunningTasks()
    {
        myTasks.Clear();
        string sql = "SELECT task_id, taskname, responsible, deadline FROM task";
        if (currentRadio == "byStatus") sql += $" WHERE status='{currentStatus}'";
        sql += ";";
        NpgsqlDataReader data = DB.executeSQL(sql);
        DBTask task;
        while (data.Read())
        {
            task = new DBTask();
            task.set_from_reader(data);
            myTasks.Add(task);
        }
        data.Close();
    }

    private void onChangeRadio(ChangeEventArgs args)
    {
        currentRadio = args.Value.ToString();
    }

    private void onChangeStatus(ChangeEventArgs args)
    {
        Console.WriteLine($"Other records, from the type {args.Value.ToString()} should be displayed");
    }

    private void addTask()
    {
        Console.WriteLine("New button was pressed");
        // Cambios el datestyle para que PostgreSQL acepte la query
        string sql = "SET datestyle TO dmy;";
        sql+= "INSERT INTO task (taskname, supervisor, email_supervisor, responsible, email_responsible, created_on, deadline, estimate_hours, status) VALUES ";
        sql += $"('{newTask.taskname}', '{newTask.supervisor}', '{newTask.email_supervisor}', '{newTask.responsible}', '{newTask.email_responsible}', '{DateTime.Now}', '{newTask.deadline}', {newTask.estimate_hours}, '{newTask.status}');";
        NpgsqlDataReader data = DB.executeSQL(sql);
        data.Close();
        newTask = new DBTask();
        // Volvemos a mostrar la tabla con los datos
        addingRecord = false;
        GetRunningTasks();
    }
    private void deleteTask(DBTask task)
    {
        Console.WriteLine($"The task {task.task_id} should be removed");
        string sql = $"DELETE FROM task WHERE task_id = {task.task_id}";
        NpgsqlDataReader data = DB.executeSQL(sql);
        data.Close();
        GetRunningTasks();
    }
    private void updateTaskStatus(ChangeEventArgs e, DBTask task)
    {
        Console.WriteLine($"The task {task.task_id} should change to {e.Value.ToString()}");
    }
}
